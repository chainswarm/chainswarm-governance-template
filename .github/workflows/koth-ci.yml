name: KOTH CI (Python)
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, edited]
permissions:
  contents: read
  pull-requests: write
env:
  TZ: Europe/Warsaw

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR HEAD
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install project deps (if any)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest coverage ruff radon

      # ---------- Lint on PR HEAD ----------
      - name: Ruff (lint) JSON
        run: |
          ruff check . --output-format json > ruff.json || true

      # ---------- Tests + Coverage on PR HEAD ----------
      - name: Run tests (PR HEAD) with coverage
        run: |
          coverage run -m pytest -q || true
          coverage xml -o coverage.xml || true

      # ---------- Checkout BASE for baseline metrics ----------
      - name: Checkout BASE into baseline/
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: baseline

      - name: Install deps for baseline (if separate)
        working-directory: baseline
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ruff (baseline) JSON
        working-directory: baseline
        run: |
          ruff check . --output-format json > ruff.json || true

      - name: Run tests (baseline) with coverage
        working-directory: baseline
        run: |
          coverage run -m pytest -q || true
          coverage xml -o coverage.xml || true

      # ---------- Compute metrics (coverage/quality/perf) ----------
      - name: Compute metrics JSONs
        run: |
          python tools/compute_koth_metrics.py \
            --pr . \
            --base baseline \
            --out-coverage coverage.json \
            --out-quality quality.json

      - name: Optional perf harness
        run: |
          if [ -f tools/perf_harness.py ]; then \
            python tools/perf_harness.py > koth-bench.json || echo '{}' > koth-bench.json; \
          else echo '{}' > koth-bench.json; fi

      # ---------- Extract miner & requirement from PR body ----------
      - name: Extract metadata from PR body
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || "";
            function pick(re, name){ const m = body.match(re); if(!m){ core.setFailed(`Missing ${name} in PR body`); } return m?m[1].trim():''; }
            const rid = pick(/R-ID:\s*(R-\d{5})/i, "R-ID");
            const hotkey = pick(/Hotkey.*?:\s*`([^`]+)`/i, "Hotkey");
            const nonce = pick(/Nonce.*?:\s*`([^`]+)`/i, "Nonce");
            const sig = pick(/Signature.*?:\s*`([^`]+)`/i, "Signature");
            core.setOutput('rid', rid);
            core.setOutput('hotkey', hotkey);
            core.setOutput('nonce', nonce);
            core.setOutput('sig', sig);

      - name: Verify hotkey signature (ed25519, SS58)
        uses: actions/setup-node@v4
      - run: npm i @polkadot/util-crypto @polkadot/util
      - run: |
          node - <<'JS'
          const {decodeAddress, signatureVerify} = require('@polkadot/util-crypto');
          const {u8aConcat, u8aToU8a} = require('@polkadot/util');
          const hotkey = process.env.HOTKEY;
          const nonce = process.env.NONCE;
          const sigB64 = process.env.SIG;
          try {
            const pub = decodeAddress(hotkey);
            const msg = u8aConcat(Uint8Array.from(Buffer.from(nonce,'hex')), u8aToU8a(hotkey));
            const sig = Uint8Array.from(Buffer.from(sigB64,'base64'));
            const ok = signatureVerify(msg, sig, pub).isValid;
            if(!ok){ console.error('Signature verification failed'); process.exit(1); }
            console.log('Signature OK');
          } catch(e){ console.error(e); process.exit(1); }
          JS
        env:
          HOTKEY: ${{ steps.meta.outputs.hotkey }}
          NONCE:  ${{ steps.meta.outputs.nonce }}
          SIG:    ${{ steps.meta.outputs.sig }}

      # ---------- Produce KOTH score artifact ----------
      - name: Produce koth-score.json
        run: |
          python - <<'PY'
          import json, time
          def load(p, d): 
              try: 
                  with open(p,'r') as f: return json.load(f)
              except: return d
          score = {
            "requirement": "${{ steps.meta.outputs.rid }}",
            "miner_github": "${{ github.event.pull_request.user.login }}",
            "hotkey": "${{ steps.meta.outputs.hotkey }}",
            "spec_checks": {"passed": 1, "total": 1},  # owner-specific harness can update this later
            "coverage": load("coverage.json", {"delta": 0.0, "new_total": 0.0}),
            "quality":  load("quality.json",  {"complexity_delta": 0.0, "dup_delta": 0.0, "lints": 0}),
            "perf":     load("koth-bench.json", {"latency_ms_delta": 0.0, "throughput_delta": 0.0}),
            "timely":   {"submitted_at": int(time.time())}
          }
          open('koth-score.json','w').write(json.dumps(score, indent=2))
          PY

      - name: Upload artifact (koth-score)
        uses: actions/upload-artifact@v4
        with:
          name: koth-score
          path: koth-score.json
